using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace DiffusionNexus.UI.ViewModels;

public partial class LoraHelperViewModel : ViewModelBase
{
    // This is the backing list of *all* cards
    private readonly List<LoraCard> _allCards = new();

    [ObservableProperty]
    private string? searchText;

    // What the View actually binds to
    public ObservableCollection<LoraCard> Cards { get; } = new();
    public ObservableCollection<string> FolderItems { get; } = new() { "Models", "Generated Images" };
    public LoraHelperViewModel()
    {
        // 1) Populate the master list
        for (int i = 1; i <= 10; i++)
        {
            var card = new LoraCard
            {
                Name = $"Sample Lora {i}",
                Description = "This is a sample lora card for demonstration purposes"
            };
            _allCards.Add(card);
        }

        // 2) Initialise the visible collection
        RefreshCards();
    }

    // 3) This partial method is generated by [ObservableProperty];
    //    it runs whenever SearchText is set.
    partial void OnSearchTextChanged(string? value)
    {
        RefreshCards();
    }

    private void RefreshCards()
    {
        // filter (case-insensitive) if there's any text, otherwise show all
        var query = string.IsNullOrWhiteSpace(SearchText)
            ? _allCards
            : _allCards.Where(c =>
                c.Name?.Contains(SearchText!, StringComparison.OrdinalIgnoreCase) == true);

        // rebuild the ObservableCollection
        Cards.Clear();
        foreach (var c in query)
            Cards.Add(c);
    }
}


public partial class LoraCard : ViewModelBase
{
    [ObservableProperty]
    private string? _name;

    [ObservableProperty]
    private string? _description;
}
