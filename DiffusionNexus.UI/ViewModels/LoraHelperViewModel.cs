using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.IO;
using Avalonia.Media.Imaging;
using Avalonia.Threading;
using DiffusionNexus.UI.Classes;
using DiffusionNexus.LoraSort.Service.Classes;
using DiffusionNexus.LoraSort.Service.Services;

namespace DiffusionNexus.UI.ViewModels;

public partial class LoraHelperViewModel : ViewModelBase
{
    // This is the backing list of *all* cards
    private readonly List<LoraCard> _allCards = new();

    [ObservableProperty]
    private bool isLoading;

    [ObservableProperty]
    private string? searchText;

    // What the View actually binds to
public ObservableCollection<LoraCard> Cards { get; } = new();
public ObservableCollection<FolderItemViewModel> FolderItems { get; } = new();
private readonly ISettingsService _settingsService;
public LoraHelperViewModel() : this(new SettingsService())
{
}

public LoraHelperViewModel(ISettingsService settingsService)
{
    _settingsService = settingsService;
    _ = LoadAsync();
}

private async Task LoadAsync()
{
    IsLoading = true;
    var settings = await _settingsService.LoadAsync();
    if (string.IsNullOrWhiteSpace(settings.LoraHelperFolderPath))
    {
        IsLoading = false;
        return;
    }

    var discovery = new ModelDiscoveryService();

    var rootNode = await Task.Run(() => discovery.BuildFolderTree(settings.LoraHelperFolderPath));
    await Dispatcher.UIThread.InvokeAsync(() =>
    {
        FolderItems.Clear();
        foreach (var child in rootNode.Children)
            FolderItems.Add(ConvertFolder(child));
    });

    var models = await Task.Run(() => discovery.CollectModels(settings.LoraHelperFolderPath));

    await Dispatcher.UIThread.InvokeAsync(() =>
    {
        _allCards.Clear();
        Cards.Clear();
    });

    foreach (var model in models)
    {
        var card = new LoraCard { Name = model.ModelName, Model = model };
        _allCards.Add(card);
        Dispatcher.UIThread.Post(() => Cards.Add(card));
    }

    await Dispatcher.UIThread.InvokeAsync(() => IsLoading = false);
}

private FolderItemViewModel ConvertFolder(FolderNode node)
{
    var vm = new FolderItemViewModel { Name = node.Name, ModelCount = node.ModelCount };
    foreach (var child in node.Children)
        vm.Children.Add(ConvertFolder(child));
    return vm;
}

    // 3) This partial method is generated by [ObservableProperty];
    //    it runs whenever SearchText is set.
    partial void OnSearchTextChanged(string? value)
    {
        RefreshCards();
    }

    private void RefreshCards()
    {
        // filter (case-insensitive) if there's any text, otherwise show all
        var query = string.IsNullOrWhiteSpace(SearchText)
            ? _allCards
            : _allCards.Where(c =>
                c.Name?.Contains(SearchText!, StringComparison.OrdinalIgnoreCase) == true);

        // rebuild the ObservableCollection
        Cards.Clear();
        foreach (var c in query)
            Cards.Add(c);
    }
}


public partial class LoraCard : ViewModelBase
{
    [ObservableProperty]
    private string? _name;

    [ObservableProperty]
    private string? _description;

    [ObservableProperty]
    private ModelClass? _model;

    [ObservableProperty]
    private Bitmap? _previewImage;

    partial void OnModelChanged(ModelClass? value)
    {
        _ = LoadPreviewImageAsync();
    }

    private async Task LoadPreviewImageAsync()
    {
        var path = GetPreviewImagePath();
        if (path is null || !File.Exists(path))
        {
            PreviewImage = null;
            return;
        }

        try
        {
            var bitmap = await Task.Run(() =>
            {
                using var stream = File.OpenRead(path);
                return new Bitmap(stream);
            });
            await Dispatcher.UIThread.InvokeAsync(() => PreviewImage = bitmap);
        }
        catch
        {
            await Dispatcher.UIThread.InvokeAsync(() => PreviewImage = null);
        }
    }

    public string? GetPreviewImagePath()
    {
        if (Model == null) return null;
        string[] priority = [
            ".preview.webp",
            ".preview.jpeg",
            ".preview.jpg",
            ".preview.png"
        ];

        foreach (var ext in priority)
        {
            var file = Model.AssociatedFilesInfo.FirstOrDefault(f => f.Name.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
            if (file != null)
                return file.FullName;
        }
        return null;
    }
}
